use ark_serialize::SerializationError;
use clap::{Parser, ValueEnum};
use folding_schemes_solidity::{Groth16Data, KzgData, NovaCyclefoldData, ProtocolData};
use std::{env, fmt::Display, path::PathBuf};

fn get_default_out_path() -> PathBuf {
    let mut path = env::current_dir().unwrap();
    path.push("verifier.sol");
    path
}

#[derive(Debug, Copy, Clone, ValueEnum)]
pub(crate) enum Protocol {
    Groth16,
    Kzg,
    NovaCyclefold,
}

impl Display for Protocol {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

// Would be nice to link this to the `Template` or `ProtocolData` traits.
// Sadly, this requires Boxing with `dyn` or similar which would complicate the code more than is actually required.
impl Protocol {
    pub(crate) fn render(
        &self,
        data: &[u8],
        pragma: Option<String>,
    ) -> Result<Vec<u8>, SerializationError> {
        match self {
            Self::Groth16 => {
                Ok(Groth16Data::deserialize_protocol_data(data)?.render_as_template(&pragma))
            }

            Self::Kzg => Ok(KzgData::deserialize_protocol_data(data)?.render_as_template(&pragma)),
            Self::NovaCyclefold => {
                Ok(NovaCyclefoldData::deserialize_protocol_data(data)?.render_as_template(&pragma))
            }
        }
    }
}

#[derive(Debug, Parser)]
#[command(author = "0XPARC & PSE", version, about, long_about = None)]
#[command(propagate_version = true)]
/// A tool to create Solidity Contracts which act as verifiers for the major Folding Schemes implemented
/// within the `folding-schemes` repo.
pub(crate) struct Cli {
    #[command(flatten)]
    pub verbosity: clap_verbosity_flag::Verbosity,

    /// Selects the protocol for which we want to generate the Decider circuit Solidity Verifier.
    #[arg(short = 'p', long, value_enum, rename_all = "lower")]
    pub protocol: Protocol,

    #[arg(short = 'o', long, default_value=get_default_out_path().into_os_string())]
    /// Sets the output path for all the artifacts generated by the command.
    pub out: PathBuf,

    #[arg(short = 'd', long)]
    /// Sets the input path for the file containing all the data required by the protocol chosen such that the verification contract can be generated.
    pub protocol_data: PathBuf,

    /// Selects the Solidity compiler version to be set in the Solidity Verifier contract artifact.
    #[arg(long, default_value=None)]
    pub pragma: Option<String>,
}
